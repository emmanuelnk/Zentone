{"dependencies":[{"name":"/Users/terminallychill/Sites/zentone/package.json","includedInParent":true,"mtime":1524394439205},{"name":"/Users/terminallychill/Sites/zentone/node_modules/pg-types/package.json","includedInParent":true,"mtime":1503332094000}],"generated":{"js":"var parseBits = function(data, bits, offset, invert, callback) {\n  offset = offset || 0;\n  invert = invert || false;\n  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };\n  var offsetBytes = offset >> 3;\n\n  var inv = function(value) {\n    if (invert) {\n      return ~value & 0xff;\n    }\n\n    return value;\n  };\n\n  // read first (maybe partial) byte\n  var mask = 0xff;\n  var firstBits = 8 - (offset % 8);\n  if (bits < firstBits) {\n    mask = (0xff << (8 - bits)) & 0xff;\n    firstBits = bits;\n  }\n\n  if (offset) {\n    mask = mask >> (offset % 8);\n  }\n\n  var result = 0;\n  if ((offset % 8) + bits >= 8) {\n    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);\n  }\n\n  // read bytes\n  var bytes = (bits + offset) >> 3;\n  for (var i = offsetBytes + 1; i < bytes; i++) {\n    result = callback(result, inv(data[i]), 8);\n  }\n\n  // bits to read, that are not a complete byte\n  var lastBits = (bits + offset) % 8;\n  if (lastBits > 0) {\n    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);\n  }\n\n  return result;\n};\n\nvar parseFloatFromBits = function(data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1;\n  var sign = parseBits(data, 1);\n  var exponent = parseBits(data, exponentBits, 1);\n\n  if (exponent === 0) {\n    return 0;\n  }\n\n  // parse mantissa\n  var precisionBitsCounter = 1;\n  var parsePrecisionBits = function(lastValue, newValue, bits) {\n    if (lastValue === 0) {\n      lastValue = 1;\n    }\n\n    for (var i = 1; i <= bits; i++) {\n      precisionBitsCounter /= 2;\n      if ((newValue & (0x1 << (bits - i))) > 0) {\n        lastValue += precisionBitsCounter;\n      }\n    }\n\n    return lastValue;\n  };\n\n  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);\n\n  // special cases\n  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {\n    if (mantissa === 0) {\n      return (sign === 0) ? Infinity : -Infinity;\n    }\n\n    return NaN;\n  }\n\n  // normale number\n  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;\n};\n\nvar parseInt16 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 15, 1, true) + 1);\n  }\n\n  return parseBits(value, 15, 1);\n};\n\nvar parseInt32 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 31, 1, true) + 1);\n  }\n\n  return parseBits(value, 31, 1);\n};\n\nvar parseFloat32 = function(value) {\n  return parseFloatFromBits(value, 23, 8);\n};\n\nvar parseFloat64 = function(value) {\n  return parseFloatFromBits(value, 52, 11);\n};\n\nvar parseNumeric = function(value) {\n  var sign = parseBits(value, 16, 32);\n  if (sign == 0xc000) {\n    return NaN;\n  }\n\n  var weight = Math.pow(10000, parseBits(value, 16, 16));\n  var result = 0;\n\n  var digits = [];\n  var ndigits = parseBits(value, 16);\n  for (var i = 0; i < ndigits; i++) {\n    result += parseBits(value, 16, 64 + (16 * i)) * weight;\n    weight /= 10000;\n  }\n\n  var scale = Math.pow(10, parseBits(value, 16, 48));\n  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;\n};\n\nvar parseDate = function(isUTC, value) {\n  var sign = parseBits(value, 1);\n  var rawValue = parseBits(value, 63, 1);\n\n  // discard usecs and shift from 2000 to 1970\n  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);\n\n  if (!isUTC) {\n    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);\n  }\n\n  // add microseconds to the date\n  result.usec = rawValue % 1000;\n  result.getMicroSeconds = function() {\n    return this.usec;\n  };\n  result.setMicroSeconds = function(value) {\n    this.usec = value;\n  };\n  result.getUTCMicroSeconds = function() {\n    return this.usec;\n  };\n\n  return result;\n};\n\nvar parseArray = function(value) {\n  var dim = parseBits(value, 32);\n\n  var flags = parseBits(value, 32, 32);\n  var elementType = parseBits(value, 32, 64);\n\n  var offset = 96;\n  var dims = [];\n  for (var i = 0; i < dim; i++) {\n    // parse dimension\n    dims[i] = parseBits(value, 32, offset);\n    offset += 32;\n\n    // ignore lower bounds\n    offset += 32;\n  }\n\n  var parseElement = function(elementType) {\n    // parse content length\n    var length = parseBits(value, 32, offset);\n    offset += 32;\n\n    // parse null values\n    if (length == 0xffffffff) {\n      return null;\n    }\n\n    var result;\n    if ((elementType == 0x17) || (elementType == 0x14)) {\n      // int/bigint\n      result = parseBits(value, length * 8, offset);\n      offset += length * 8;\n      return result;\n    }\n    else if (elementType == 0x19) {\n      // string\n      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);\n      return result;\n    }\n    else {\n      console.log(\"ERROR: ElementType not implemented: \" + elementType);\n    }\n  };\n\n  var parse = function(dimension, elementType) {\n    var array = [];\n    var i;\n\n    if (dimension.length > 1) {\n      var count = dimension.shift();\n      for (i = 0; i < count; i++) {\n        array[i] = parse(dimension, elementType);\n      }\n      dimension.unshift(count);\n    }\n    else {\n      for (i = 0; i < dimension[0]; i++) {\n        array[i] = parseElement(elementType);\n      }\n    }\n\n    return array;\n  };\n\n  return parse(dims, elementType);\n};\n\nvar parseText = function(value) {\n  return value.toString('utf8');\n};\n\nvar parseBool = function(value) {\n  if(value === null) return null;\n  return (parseBits(value, 8) > 0);\n};\n\nvar init = function(register) {\n  register(21, parseInt16);\n  register(23, parseInt32);\n  register(26, parseInt32);\n  register(1700, parseNumeric);\n  register(700, parseFloat32);\n  register(701, parseFloat64);\n  register(16, parseBool);\n  register(1114, parseDate.bind(null, false));\n  register(1184, parseDate.bind(null, true));\n  register(1000, parseArray);\n  register(1007, parseArray);\n  register(1016, parseArray);\n  register(1008, parseArray);\n  register(1009, parseArray);\n  register(25, parseText);\n};\n\nmodule.exports = {\n  init: init\n};\n","map":{"mappings":[{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/pg-types/lib/binaryParsers.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}}],"sources":{"node_modules/pg-types/lib/binaryParsers.js":"var parseBits = function(data, bits, offset, invert, callback) {\n  offset = offset || 0;\n  invert = invert || false;\n  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };\n  var offsetBytes = offset >> 3;\n\n  var inv = function(value) {\n    if (invert) {\n      return ~value & 0xff;\n    }\n\n    return value;\n  };\n\n  // read first (maybe partial) byte\n  var mask = 0xff;\n  var firstBits = 8 - (offset % 8);\n  if (bits < firstBits) {\n    mask = (0xff << (8 - bits)) & 0xff;\n    firstBits = bits;\n  }\n\n  if (offset) {\n    mask = mask >> (offset % 8);\n  }\n\n  var result = 0;\n  if ((offset % 8) + bits >= 8) {\n    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);\n  }\n\n  // read bytes\n  var bytes = (bits + offset) >> 3;\n  for (var i = offsetBytes + 1; i < bytes; i++) {\n    result = callback(result, inv(data[i]), 8);\n  }\n\n  // bits to read, that are not a complete byte\n  var lastBits = (bits + offset) % 8;\n  if (lastBits > 0) {\n    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);\n  }\n\n  return result;\n};\n\nvar parseFloatFromBits = function(data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1;\n  var sign = parseBits(data, 1);\n  var exponent = parseBits(data, exponentBits, 1);\n\n  if (exponent === 0) {\n    return 0;\n  }\n\n  // parse mantissa\n  var precisionBitsCounter = 1;\n  var parsePrecisionBits = function(lastValue, newValue, bits) {\n    if (lastValue === 0) {\n      lastValue = 1;\n    }\n\n    for (var i = 1; i <= bits; i++) {\n      precisionBitsCounter /= 2;\n      if ((newValue & (0x1 << (bits - i))) > 0) {\n        lastValue += precisionBitsCounter;\n      }\n    }\n\n    return lastValue;\n  };\n\n  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);\n\n  // special cases\n  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {\n    if (mantissa === 0) {\n      return (sign === 0) ? Infinity : -Infinity;\n    }\n\n    return NaN;\n  }\n\n  // normale number\n  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;\n};\n\nvar parseInt16 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 15, 1, true) + 1);\n  }\n\n  return parseBits(value, 15, 1);\n};\n\nvar parseInt32 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 31, 1, true) + 1);\n  }\n\n  return parseBits(value, 31, 1);\n};\n\nvar parseFloat32 = function(value) {\n  return parseFloatFromBits(value, 23, 8);\n};\n\nvar parseFloat64 = function(value) {\n  return parseFloatFromBits(value, 52, 11);\n};\n\nvar parseNumeric = function(value) {\n  var sign = parseBits(value, 16, 32);\n  if (sign == 0xc000) {\n    return NaN;\n  }\n\n  var weight = Math.pow(10000, parseBits(value, 16, 16));\n  var result = 0;\n\n  var digits = [];\n  var ndigits = parseBits(value, 16);\n  for (var i = 0; i < ndigits; i++) {\n    result += parseBits(value, 16, 64 + (16 * i)) * weight;\n    weight /= 10000;\n  }\n\n  var scale = Math.pow(10, parseBits(value, 16, 48));\n  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;\n};\n\nvar parseDate = function(isUTC, value) {\n  var sign = parseBits(value, 1);\n  var rawValue = parseBits(value, 63, 1);\n\n  // discard usecs and shift from 2000 to 1970\n  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);\n\n  if (!isUTC) {\n    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);\n  }\n\n  // add microseconds to the date\n  result.usec = rawValue % 1000;\n  result.getMicroSeconds = function() {\n    return this.usec;\n  };\n  result.setMicroSeconds = function(value) {\n    this.usec = value;\n  };\n  result.getUTCMicroSeconds = function() {\n    return this.usec;\n  };\n\n  return result;\n};\n\nvar parseArray = function(value) {\n  var dim = parseBits(value, 32);\n\n  var flags = parseBits(value, 32, 32);\n  var elementType = parseBits(value, 32, 64);\n\n  var offset = 96;\n  var dims = [];\n  for (var i = 0; i < dim; i++) {\n    // parse dimension\n    dims[i] = parseBits(value, 32, offset);\n    offset += 32;\n\n    // ignore lower bounds\n    offset += 32;\n  }\n\n  var parseElement = function(elementType) {\n    // parse content length\n    var length = parseBits(value, 32, offset);\n    offset += 32;\n\n    // parse null values\n    if (length == 0xffffffff) {\n      return null;\n    }\n\n    var result;\n    if ((elementType == 0x17) || (elementType == 0x14)) {\n      // int/bigint\n      result = parseBits(value, length * 8, offset);\n      offset += length * 8;\n      return result;\n    }\n    else if (elementType == 0x19) {\n      // string\n      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);\n      return result;\n    }\n    else {\n      console.log(\"ERROR: ElementType not implemented: \" + elementType);\n    }\n  };\n\n  var parse = function(dimension, elementType) {\n    var array = [];\n    var i;\n\n    if (dimension.length > 1) {\n      var count = dimension.shift();\n      for (i = 0; i < count; i++) {\n        array[i] = parse(dimension, elementType);\n      }\n      dimension.unshift(count);\n    }\n    else {\n      for (i = 0; i < dimension[0]; i++) {\n        array[i] = parseElement(elementType);\n      }\n    }\n\n    return array;\n  };\n\n  return parse(dims, elementType);\n};\n\nvar parseText = function(value) {\n  return value.toString('utf8');\n};\n\nvar parseBool = function(value) {\n  if(value === null) return null;\n  return (parseBits(value, 8) > 0);\n};\n\nvar init = function(register) {\n  register(21, parseInt16);\n  register(23, parseInt32);\n  register(26, parseInt32);\n  register(1700, parseNumeric);\n  register(700, parseFloat32);\n  register(701, parseFloat64);\n  register(16, parseBool);\n  register(1114, parseDate.bind(null, false));\n  register(1184, parseDate.bind(null, true));\n  register(1000, parseArray);\n  register(1007, parseArray);\n  register(1016, parseArray);\n  register(1008, parseArray);\n  register(1009, parseArray);\n  register(25, parseText);\n};\n\nmodule.exports = {\n  init: init\n};\n"},"lineCount":255}},"hash":"e5111451408bb231d1c87bb932ec8b3f","cacheData":{"env":{}}}